<?php
/**
 * PulseResource
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  WhatPulse
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * WhatPulse API
 *
 * Public API for WhatPulse user data access. This API allows authenticated users to access their own data and public data from other users, depending on privacy settings.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WhatPulse\Model;

use \ArrayAccess;
use \WhatPulse\ObjectSerializer;

/**
 * PulseResource Class Doc Comment
 *
 * @category Class
 * @package  WhatPulse
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PulseResource implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PulseResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'date' => 'string',
        'keys' => 'int',
        'clicks' => 'int',
        'download_mb' => 'float',
        'upload_mb' => 'float',
        'uptime_seconds' => 'int',
        'scrolls' => 'int',
        'distance_miles' => 'float',
        'auto_pulse' => 'bool',
        'client_version' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'date' => null,
        'keys' => null,
        'clicks' => null,
        'download_mb' => null,
        'upload_mb' => null,
        'uptime_seconds' => null,
        'scrolls' => null,
        'distance_miles' => null,
        'auto_pulse' => null,
        'client_version' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'date' => false,
        'keys' => false,
        'clicks' => false,
        'download_mb' => false,
        'upload_mb' => false,
        'uptime_seconds' => false,
        'scrolls' => true,
        'distance_miles' => false,
        'auto_pulse' => false,
        'client_version' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'date' => 'date',
        'keys' => 'keys',
        'clicks' => 'clicks',
        'download_mb' => 'download_mb',
        'upload_mb' => 'upload_mb',
        'uptime_seconds' => 'uptime_seconds',
        'scrolls' => 'scrolls',
        'distance_miles' => 'distance_miles',
        'auto_pulse' => 'auto_pulse',
        'client_version' => 'client_version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'date' => 'setDate',
        'keys' => 'setKeys',
        'clicks' => 'setClicks',
        'download_mb' => 'setDownloadMb',
        'upload_mb' => 'setUploadMb',
        'uptime_seconds' => 'setUptimeSeconds',
        'scrolls' => 'setScrolls',
        'distance_miles' => 'setDistanceMiles',
        'auto_pulse' => 'setAutoPulse',
        'client_version' => 'setClientVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'date' => 'getDate',
        'keys' => 'getKeys',
        'clicks' => 'getClicks',
        'download_mb' => 'getDownloadMb',
        'upload_mb' => 'getUploadMb',
        'uptime_seconds' => 'getUptimeSeconds',
        'scrolls' => 'getScrolls',
        'distance_miles' => 'getDistanceMiles',
        'auto_pulse' => 'getAutoPulse',
        'client_version' => 'getClientVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('keys', $data ?? [], null);
        $this->setIfExists('clicks', $data ?? [], null);
        $this->setIfExists('download_mb', $data ?? [], null);
        $this->setIfExists('upload_mb', $data ?? [], null);
        $this->setIfExists('uptime_seconds', $data ?? [], null);
        $this->setIfExists('scrolls', $data ?? [], null);
        $this->setIfExists('distance_miles', $data ?? [], null);
        $this->setIfExists('auto_pulse', $data ?? [], null);
        $this->setIfExists('client_version', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['keys'] === null) {
            $invalidProperties[] = "'keys' can't be null";
        }
        if ($this->container['clicks'] === null) {
            $invalidProperties[] = "'clicks' can't be null";
        }
        if ($this->container['download_mb'] === null) {
            $invalidProperties[] = "'download_mb' can't be null";
        }
        if ($this->container['upload_mb'] === null) {
            $invalidProperties[] = "'upload_mb' can't be null";
        }
        if ($this->container['uptime_seconds'] === null) {
            $invalidProperties[] = "'uptime_seconds' can't be null";
        }
        if ($this->container['scrolls'] === null) {
            $invalidProperties[] = "'scrolls' can't be null";
        }
        if ($this->container['distance_miles'] === null) {
            $invalidProperties[] = "'distance_miles' can't be null";
        }
        if ($this->container['auto_pulse'] === null) {
            $invalidProperties[] = "'auto_pulse' can't be null";
        }
        if ($this->container['client_version'] === null) {
            $invalidProperties[] = "'client_version' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique identifier for the pulse.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date The date and time when the pulse was recorded in ISO 8601 format.
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets keys
     *
     * @return int
     */
    public function getKeys()
    {
        return $this->container['keys'];
    }

    /**
     * Sets keys
     *
     * @param int $keys The number of keys pressed in this pulse.
     *
     * @return self
     */
    public function setKeys($keys)
    {
        if (is_null($keys)) {
            throw new \InvalidArgumentException('non-nullable keys cannot be null');
        }
        $this->container['keys'] = $keys;

        return $this;
    }

    /**
     * Gets clicks
     *
     * @return int
     */
    public function getClicks()
    {
        return $this->container['clicks'];
    }

    /**
     * Sets clicks
     *
     * @param int $clicks The number of mouse clicks in this pulse.
     *
     * @return self
     */
    public function setClicks($clicks)
    {
        if (is_null($clicks)) {
            throw new \InvalidArgumentException('non-nullable clicks cannot be null');
        }
        $this->container['clicks'] = $clicks;

        return $this;
    }

    /**
     * Gets download_mb
     *
     * @return float
     */
    public function getDownloadMb()
    {
        return $this->container['download_mb'];
    }

    /**
     * Sets download_mb
     *
     * @param float $download_mb The amount of data downloaded in this pulse, in megabytes.
     *
     * @return self
     */
    public function setDownloadMb($download_mb)
    {
        if (is_null($download_mb)) {
            throw new \InvalidArgumentException('non-nullable download_mb cannot be null');
        }
        $this->container['download_mb'] = $download_mb;

        return $this;
    }

    /**
     * Gets upload_mb
     *
     * @return float
     */
    public function getUploadMb()
    {
        return $this->container['upload_mb'];
    }

    /**
     * Sets upload_mb
     *
     * @param float $upload_mb The amount of data uploaded in this pulse, in megabytes.
     *
     * @return self
     */
    public function setUploadMb($upload_mb)
    {
        if (is_null($upload_mb)) {
            throw new \InvalidArgumentException('non-nullable upload_mb cannot be null');
        }
        $this->container['upload_mb'] = $upload_mb;

        return $this;
    }

    /**
     * Gets uptime_seconds
     *
     * @return int
     */
    public function getUptimeSeconds()
    {
        return $this->container['uptime_seconds'];
    }

    /**
     * Sets uptime_seconds
     *
     * @param int $uptime_seconds The uptime recorded in this pulse, in seconds.
     *
     * @return self
     */
    public function setUptimeSeconds($uptime_seconds)
    {
        if (is_null($uptime_seconds)) {
            throw new \InvalidArgumentException('non-nullable uptime_seconds cannot be null');
        }
        $this->container['uptime_seconds'] = $uptime_seconds;

        return $this;
    }

    /**
     * Gets scrolls
     *
     * @return int
     */
    public function getScrolls()
    {
        return $this->container['scrolls'];
    }

    /**
     * Sets scrolls
     *
     * @param int $scrolls The number of mouse scrolls recorded in this pulse.
     *
     * @return self
     */
    public function setScrolls($scrolls)
    {
        if (is_null($scrolls)) {
            array_push($this->openAPINullablesSetToNull, 'scrolls');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scrolls', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scrolls'] = $scrolls;

        return $this;
    }

    /**
     * Gets distance_miles
     *
     * @return float
     */
    public function getDistanceMiles()
    {
        return $this->container['distance_miles'];
    }

    /**
     * Sets distance_miles
     *
     * @param float $distance_miles The distance the mouse has moved in miles in this pulse.
     *
     * @return self
     */
    public function setDistanceMiles($distance_miles)
    {
        if (is_null($distance_miles)) {
            throw new \InvalidArgumentException('non-nullable distance_miles cannot be null');
        }
        $this->container['distance_miles'] = $distance_miles;

        return $this;
    }

    /**
     * Gets auto_pulse
     *
     * @return bool
     */
    public function getAutoPulse()
    {
        return $this->container['auto_pulse'];
    }

    /**
     * Sets auto_pulse
     *
     * @param bool $auto_pulse Whether this pulse was automatically generated by the app.
     *
     * @return self
     */
    public function setAutoPulse($auto_pulse)
    {
        if (is_null($auto_pulse)) {
            throw new \InvalidArgumentException('non-nullable auto_pulse cannot be null');
        }
        $this->container['auto_pulse'] = $auto_pulse;

        return $this;
    }

    /**
     * Gets client_version
     *
     * @return string
     */
    public function getClientVersion()
    {
        return $this->container['client_version'];
    }

    /**
     * Sets client_version
     *
     * @param string $client_version The version of the WhatPulse client that recorded this pulse.
     *
     * @return self
     */
    public function setClientVersion($client_version)
    {
        if (is_null($client_version)) {
            throw new \InvalidArgumentException('non-nullable client_version cannot be null');
        }
        $this->container['client_version'] = $client_version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


