<?php
/**
 * ComputerResource
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  WhatPulse
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * WhatPulse API
 *
 * Public API for WhatPulse user data access. This API allows authenticated users to access their own data and public data from other users, depending on privacy settings.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WhatPulse\Model;

use \ArrayAccess;
use \WhatPulse\ObjectSerializer;

/**
 * ComputerResource Class Doc Comment
 *
 * @category Class
 * @package  WhatPulse
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComputerResource implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ComputerResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'client_version' => 'string',
        'os' => 'string',
        'is_archived' => 'bool',
        'totals' => '\WhatPulse\Model\ComputerResourceTotals',
        'pulses' => 'int',
        'last_pulse_date' => 'string',
        'hardware' => 'array<string,mixed>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'client_version' => null,
        'os' => null,
        'is_archived' => null,
        'totals' => null,
        'pulses' => null,
        'last_pulse_date' => null,
        'hardware' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'client_version' => false,
        'os' => false,
        'is_archived' => false,
        'totals' => false,
        'pulses' => true,
        'last_pulse_date' => true,
        'hardware' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'client_version' => 'client_version',
        'os' => 'os',
        'is_archived' => 'is_archived',
        'totals' => 'totals',
        'pulses' => 'pulses',
        'last_pulse_date' => 'last_pulse_date',
        'hardware' => 'hardware'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'client_version' => 'setClientVersion',
        'os' => 'setOs',
        'is_archived' => 'setIsArchived',
        'totals' => 'setTotals',
        'pulses' => 'setPulses',
        'last_pulse_date' => 'setLastPulseDate',
        'hardware' => 'setHardware'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'client_version' => 'getClientVersion',
        'os' => 'getOs',
        'is_archived' => 'getIsArchived',
        'totals' => 'getTotals',
        'pulses' => 'getPulses',
        'last_pulse_date' => 'getLastPulseDate',
        'hardware' => 'getHardware'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const OS_WINDOWS = 'windows';
    public const OS_MACOS = 'macos';
    public const OS_LINUX = 'linux';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOsAllowableValues()
    {
        return [
            self::OS_WINDOWS,
            self::OS_MACOS,
            self::OS_LINUX,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('client_version', $data ?? [], null);
        $this->setIfExists('os', $data ?? [], null);
        $this->setIfExists('is_archived', $data ?? [], null);
        $this->setIfExists('totals', $data ?? [], null);
        $this->setIfExists('pulses', $data ?? [], null);
        $this->setIfExists('last_pulse_date', $data ?? [], null);
        $this->setIfExists('hardware', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['client_version'] === null) {
            $invalidProperties[] = "'client_version' can't be null";
        }
        if ($this->container['os'] === null) {
            $invalidProperties[] = "'os' can't be null";
        }
        $allowedValues = $this->getOsAllowableValues();
        if (!is_null($this->container['os']) && !in_array($this->container['os'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'os', must be one of '%s'",
                $this->container['os'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['is_archived'] === null) {
            $invalidProperties[] = "'is_archived' can't be null";
        }
        if ($this->container['totals'] === null) {
            $invalidProperties[] = "'totals' can't be null";
        }
        if ($this->container['pulses'] === null) {
            $invalidProperties[] = "'pulses' can't be null";
        }
        if ($this->container['last_pulse_date'] === null) {
            $invalidProperties[] = "'last_pulse_date' can't be null";
        }
        if ($this->container['hardware'] === null) {
            $invalidProperties[] = "'hardware' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique identifier for the computer.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name How the computer is named on the user's account.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets client_version
     *
     * @return string
     */
    public function getClientVersion()
    {
        return $this->container['client_version'];
    }

    /**
     * Sets client_version
     *
     * @param string $client_version The version of the WhatPulse client running on this computer.
     *
     * @return self
     */
    public function setClientVersion($client_version)
    {
        if (is_null($client_version)) {
            throw new \InvalidArgumentException('non-nullable client_version cannot be null');
        }
        $this->container['client_version'] = $client_version;

        return $this;
    }

    /**
     * Gets os
     *
     * @return string
     */
    public function getOs()
    {
        return $this->container['os'];
    }

    /**
     * Sets os
     *
     * @param string $os The operating system of the computer, represented as code.
     *
     * @return self
     */
    public function setOs($os)
    {
        if (is_null($os)) {
            throw new \InvalidArgumentException('non-nullable os cannot be null');
        }
        $allowedValues = $this->getOsAllowableValues();
        if (!in_array($os, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'os', must be one of '%s'",
                    $os,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['os'] = $os;

        return $this;
    }

    /**
     * Gets is_archived
     *
     * @return bool
     */
    public function getIsArchived()
    {
        return $this->container['is_archived'];
    }

    /**
     * Sets is_archived
     *
     * @param bool $is_archived Whether or not this computer is archived.
     *
     * @return self
     */
    public function setIsArchived($is_archived)
    {
        if (is_null($is_archived)) {
            throw new \InvalidArgumentException('non-nullable is_archived cannot be null');
        }
        $this->container['is_archived'] = $is_archived;

        return $this;
    }

    /**
     * Gets totals
     *
     * @return \WhatPulse\Model\ComputerResourceTotals
     */
    public function getTotals()
    {
        return $this->container['totals'];
    }

    /**
     * Sets totals
     *
     * @param \WhatPulse\Model\ComputerResourceTotals $totals totals
     *
     * @return self
     */
    public function setTotals($totals)
    {
        if (is_null($totals)) {
            throw new \InvalidArgumentException('non-nullable totals cannot be null');
        }
        $this->container['totals'] = $totals;

        return $this;
    }

    /**
     * Gets pulses
     *
     * @return int
     */
    public function getPulses()
    {
        return $this->container['pulses'];
    }

    /**
     * Sets pulses
     *
     * @param int $pulses The total number of pulses recorded for this computer.
     *
     * @return self
     */
    public function setPulses($pulses)
    {
        if (is_null($pulses)) {
            array_push($this->openAPINullablesSetToNull, 'pulses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pulses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pulses'] = $pulses;

        return $this;
    }

    /**
     * Gets last_pulse_date
     *
     * @return string
     */
    public function getLastPulseDate()
    {
        return $this->container['last_pulse_date'];
    }

    /**
     * Sets last_pulse_date
     *
     * @param string $last_pulse_date The date and time of the last pulse recorded for this computer.
     *
     * @return self
     */
    public function setLastPulseDate($last_pulse_date)
    {
        if (is_null($last_pulse_date)) {
            array_push($this->openAPINullablesSetToNull, 'last_pulse_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_pulse_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_pulse_date'] = $last_pulse_date;

        return $this;
    }

    /**
     * Gets hardware
     *
     * @return array<string,mixed>
     */
    public function getHardware()
    {
        return $this->container['hardware'];
    }

    /**
     * Sets hardware
     *
     * @param array<string,mixed> $hardware Hardware specifications and peripherals, if available.
     *
     * @return self
     */
    public function setHardware($hardware)
    {
        if (is_null($hardware)) {
            throw new \InvalidArgumentException('non-nullable hardware cannot be null');
        }
        $this->container['hardware'] = $hardware;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


