<?php
/**
 * UserResource
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  WhatPulse
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * WhatPulse API
 *
 * Public API for WhatPulse user data access. This API allows authenticated users to access their own data and public data from other users, depending on privacy settings.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WhatPulse\Model;

use \ArrayAccess;
use \WhatPulse\ObjectSerializer;

/**
 * UserResource Class Doc Comment
 *
 * @category Class
 * @package  WhatPulse
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserResource implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'username' => 'string',
        'date_joined' => 'string',
        'first_pulse_date' => 'string',
        'last_pulse_date' => 'string',
        'pulses' => 'int',
        'team_id' => 'int',
        'team_is_manager' => 'bool',
        'country_id' => 'int',
        'is_premium' => 'bool',
        'referrals' => 'int',
        'last_referral_date' => 'string',
        'avatar' => 'string',
        'totals' => '\WhatPulse\Model\UserResourceTotals',
        'ranks' => '\WhatPulse\Model\UserResourceRanks',
        'include_in_rankings' => 'bool',
        'distance_system' => 'string',
        'last_pulse' => '\WhatPulse\Model\UserResourceLastPulse'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'username' => null,
        'date_joined' => null,
        'first_pulse_date' => null,
        'last_pulse_date' => null,
        'pulses' => null,
        'team_id' => null,
        'team_is_manager' => null,
        'country_id' => null,
        'is_premium' => null,
        'referrals' => null,
        'last_referral_date' => null,
        'avatar' => null,
        'totals' => null,
        'ranks' => null,
        'include_in_rankings' => null,
        'distance_system' => null,
        'last_pulse' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'username' => false,
        'date_joined' => false,
        'first_pulse_date' => true,
        'last_pulse_date' => true,
        'pulses' => false,
        'team_id' => true,
        'team_is_manager' => false,
        'country_id' => false,
        'is_premium' => false,
        'referrals' => false,
        'last_referral_date' => true,
        'avatar' => true,
        'totals' => false,
        'ranks' => false,
        'include_in_rankings' => false,
        'distance_system' => false,
        'last_pulse' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'username' => 'username',
        'date_joined' => 'date_joined',
        'first_pulse_date' => 'first_pulse_date',
        'last_pulse_date' => 'last_pulse_date',
        'pulses' => 'pulses',
        'team_id' => 'team_id',
        'team_is_manager' => 'team_is_manager',
        'country_id' => 'country_id',
        'is_premium' => 'is_premium',
        'referrals' => 'referrals',
        'last_referral_date' => 'last_referral_date',
        'avatar' => 'avatar',
        'totals' => 'totals',
        'ranks' => 'ranks',
        'include_in_rankings' => 'include_in_rankings',
        'distance_system' => 'distance_system',
        'last_pulse' => 'last_pulse'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'username' => 'setUsername',
        'date_joined' => 'setDateJoined',
        'first_pulse_date' => 'setFirstPulseDate',
        'last_pulse_date' => 'setLastPulseDate',
        'pulses' => 'setPulses',
        'team_id' => 'setTeamId',
        'team_is_manager' => 'setTeamIsManager',
        'country_id' => 'setCountryId',
        'is_premium' => 'setIsPremium',
        'referrals' => 'setReferrals',
        'last_referral_date' => 'setLastReferralDate',
        'avatar' => 'setAvatar',
        'totals' => 'setTotals',
        'ranks' => 'setRanks',
        'include_in_rankings' => 'setIncludeInRankings',
        'distance_system' => 'setDistanceSystem',
        'last_pulse' => 'setLastPulse'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'username' => 'getUsername',
        'date_joined' => 'getDateJoined',
        'first_pulse_date' => 'getFirstPulseDate',
        'last_pulse_date' => 'getLastPulseDate',
        'pulses' => 'getPulses',
        'team_id' => 'getTeamId',
        'team_is_manager' => 'getTeamIsManager',
        'country_id' => 'getCountryId',
        'is_premium' => 'getIsPremium',
        'referrals' => 'getReferrals',
        'last_referral_date' => 'getLastReferralDate',
        'avatar' => 'getAvatar',
        'totals' => 'getTotals',
        'ranks' => 'getRanks',
        'include_in_rankings' => 'getIncludeInRankings',
        'distance_system' => 'getDistanceSystem',
        'last_pulse' => 'getLastPulse'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DISTANCE_SYSTEM_METRIC = 'metric';
    public const DISTANCE_SYSTEM_IMPERIAL = 'imperial';
    public const DISTANCE_SYSTEM_AUTO = 'auto';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDistanceSystemAllowableValues()
    {
        return [
            self::DISTANCE_SYSTEM_METRIC,
            self::DISTANCE_SYSTEM_IMPERIAL,
            self::DISTANCE_SYSTEM_AUTO,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('date_joined', $data ?? [], null);
        $this->setIfExists('first_pulse_date', $data ?? [], null);
        $this->setIfExists('last_pulse_date', $data ?? [], null);
        $this->setIfExists('pulses', $data ?? [], null);
        $this->setIfExists('team_id', $data ?? [], null);
        $this->setIfExists('team_is_manager', $data ?? [], null);
        $this->setIfExists('country_id', $data ?? [], null);
        $this->setIfExists('is_premium', $data ?? [], null);
        $this->setIfExists('referrals', $data ?? [], null);
        $this->setIfExists('last_referral_date', $data ?? [], null);
        $this->setIfExists('avatar', $data ?? [], null);
        $this->setIfExists('totals', $data ?? [], null);
        $this->setIfExists('ranks', $data ?? [], null);
        $this->setIfExists('include_in_rankings', $data ?? [], null);
        $this->setIfExists('distance_system', $data ?? [], null);
        $this->setIfExists('last_pulse', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['username'] === null) {
            $invalidProperties[] = "'username' can't be null";
        }
        if ($this->container['date_joined'] === null) {
            $invalidProperties[] = "'date_joined' can't be null";
        }
        if ($this->container['first_pulse_date'] === null) {
            $invalidProperties[] = "'first_pulse_date' can't be null";
        }
        if ($this->container['last_pulse_date'] === null) {
            $invalidProperties[] = "'last_pulse_date' can't be null";
        }
        if ($this->container['pulses'] === null) {
            $invalidProperties[] = "'pulses' can't be null";
        }
        if ($this->container['team_id'] === null) {
            $invalidProperties[] = "'team_id' can't be null";
        }
        if ($this->container['team_is_manager'] === null) {
            $invalidProperties[] = "'team_is_manager' can't be null";
        }
        if ($this->container['country_id'] === null) {
            $invalidProperties[] = "'country_id' can't be null";
        }
        if ($this->container['is_premium'] === null) {
            $invalidProperties[] = "'is_premium' can't be null";
        }
        if ($this->container['referrals'] === null) {
            $invalidProperties[] = "'referrals' can't be null";
        }
        if ($this->container['last_referral_date'] === null) {
            $invalidProperties[] = "'last_referral_date' can't be null";
        }
        if ($this->container['avatar'] === null) {
            $invalidProperties[] = "'avatar' can't be null";
        }
        if ($this->container['totals'] === null) {
            $invalidProperties[] = "'totals' can't be null";
        }
        if ($this->container['ranks'] === null) {
            $invalidProperties[] = "'ranks' can't be null";
        }
        if ($this->container['include_in_rankings'] === null) {
            $invalidProperties[] = "'include_in_rankings' can't be null";
        }
        if ($this->container['distance_system'] === null) {
            $invalidProperties[] = "'distance_system' can't be null";
        }
        $allowedValues = $this->getDistanceSystemAllowableValues();
        if (!is_null($this->container['distance_system']) && !in_array($this->container['distance_system'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'distance_system', must be one of '%s'",
                $this->container['distance_system'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['last_pulse'] === null) {
            $invalidProperties[] = "'last_pulse' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique identifier for the user.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username The username of the user.
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets date_joined
     *
     * @return string
     */
    public function getDateJoined()
    {
        return $this->container['date_joined'];
    }

    /**
     * Sets date_joined
     *
     * @param string $date_joined The date the user joined WhatPulse, in ISO 8601 format.
     *
     * @return self
     */
    public function setDateJoined($date_joined)
    {
        if (is_null($date_joined)) {
            throw new \InvalidArgumentException('non-nullable date_joined cannot be null');
        }
        $this->container['date_joined'] = $date_joined;

        return $this;
    }

    /**
     * Gets first_pulse_date
     *
     * @return string
     */
    public function getFirstPulseDate()
    {
        return $this->container['first_pulse_date'];
    }

    /**
     * Sets first_pulse_date
     *
     * @param string $first_pulse_date The date of the first pulse, in ISO 8601 format.
     *
     * @return self
     */
    public function setFirstPulseDate($first_pulse_date)
    {
        if (is_null($first_pulse_date)) {
            array_push($this->openAPINullablesSetToNull, 'first_pulse_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('first_pulse_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['first_pulse_date'] = $first_pulse_date;

        return $this;
    }

    /**
     * Gets last_pulse_date
     *
     * @return string
     */
    public function getLastPulseDate()
    {
        return $this->container['last_pulse_date'];
    }

    /**
     * Sets last_pulse_date
     *
     * @param string $last_pulse_date The date of the last pulse, in ISO 8601 format.
     *
     * @return self
     */
    public function setLastPulseDate($last_pulse_date)
    {
        if (is_null($last_pulse_date)) {
            array_push($this->openAPINullablesSetToNull, 'last_pulse_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_pulse_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_pulse_date'] = $last_pulse_date;

        return $this;
    }

    /**
     * Gets pulses
     *
     * @return int
     */
    public function getPulses()
    {
        return $this->container['pulses'];
    }

    /**
     * Sets pulses
     *
     * @param int $pulses The total number of pulses sent by the user.
     *
     * @return self
     */
    public function setPulses($pulses)
    {
        if (is_null($pulses)) {
            throw new \InvalidArgumentException('non-nullable pulses cannot be null');
        }
        $this->container['pulses'] = $pulses;

        return $this;
    }

    /**
     * Gets team_id
     *
     * @return int
     */
    public function getTeamId()
    {
        return $this->container['team_id'];
    }

    /**
     * Sets team_id
     *
     * @param int $team_id The ID of the team the user is part of, if any.
     *
     * @return self
     */
    public function setTeamId($team_id)
    {
        if (is_null($team_id)) {
            array_push($this->openAPINullablesSetToNull, 'team_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('team_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['team_id'] = $team_id;

        return $this;
    }

    /**
     * Gets team_is_manager
     *
     * @return bool
     */
    public function getTeamIsManager()
    {
        return $this->container['team_is_manager'];
    }

    /**
     * Sets team_is_manager
     *
     * @param bool $team_is_manager Whether the user is a manager of their team.
     *
     * @return self
     */
    public function setTeamIsManager($team_is_manager)
    {
        if (is_null($team_is_manager)) {
            throw new \InvalidArgumentException('non-nullable team_is_manager cannot be null');
        }
        $this->container['team_is_manager'] = $team_is_manager;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return int
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param int $country_id The country ID of the user, used for geographical information.
     *
     * @return self
     */
    public function setCountryId($country_id)
    {
        if (is_null($country_id)) {
            throw new \InvalidArgumentException('non-nullable country_id cannot be null');
        }
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets is_premium
     *
     * @return bool
     */
    public function getIsPremium()
    {
        return $this->container['is_premium'];
    }

    /**
     * Sets is_premium
     *
     * @param bool $is_premium Whether the user is an active premium member.
     *
     * @return self
     */
    public function setIsPremium($is_premium)
    {
        if (is_null($is_premium)) {
            throw new \InvalidArgumentException('non-nullable is_premium cannot be null');
        }
        $this->container['is_premium'] = $is_premium;

        return $this;
    }

    /**
     * Gets referrals
     *
     * @return int
     */
    public function getReferrals()
    {
        return $this->container['referrals'];
    }

    /**
     * Sets referrals
     *
     * @param int $referrals The number of referrals the user has made.
     *
     * @return self
     */
    public function setReferrals($referrals)
    {
        if (is_null($referrals)) {
            throw new \InvalidArgumentException('non-nullable referrals cannot be null');
        }
        $this->container['referrals'] = $referrals;

        return $this;
    }

    /**
     * Gets last_referral_date
     *
     * @return string
     */
    public function getLastReferralDate()
    {
        return $this->container['last_referral_date'];
    }

    /**
     * Sets last_referral_date
     *
     * @param string $last_referral_date The date of the last referral, in ISO 8601 format.
     *
     * @return self
     */
    public function setLastReferralDate($last_referral_date)
    {
        if (is_null($last_referral_date)) {
            array_push($this->openAPINullablesSetToNull, 'last_referral_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_referral_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_referral_date'] = $last_referral_date;

        return $this;
    }

    /**
     * Gets avatar
     *
     * @return string
     */
    public function getAvatar()
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     *
     * @param string $avatar The user's avatar URL.
     *
     * @return self
     */
    public function setAvatar($avatar)
    {
        if (is_null($avatar)) {
            array_push($this->openAPINullablesSetToNull, 'avatar');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avatar', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['avatar'] = $avatar;

        return $this;
    }

    /**
     * Gets totals
     *
     * @return \WhatPulse\Model\UserResourceTotals
     */
    public function getTotals()
    {
        return $this->container['totals'];
    }

    /**
     * Sets totals
     *
     * @param \WhatPulse\Model\UserResourceTotals $totals totals
     *
     * @return self
     */
    public function setTotals($totals)
    {
        if (is_null($totals)) {
            throw new \InvalidArgumentException('non-nullable totals cannot be null');
        }
        $this->container['totals'] = $totals;

        return $this;
    }

    /**
     * Gets ranks
     *
     * @return \WhatPulse\Model\UserResourceRanks
     */
    public function getRanks()
    {
        return $this->container['ranks'];
    }

    /**
     * Sets ranks
     *
     * @param \WhatPulse\Model\UserResourceRanks $ranks ranks
     *
     * @return self
     */
    public function setRanks($ranks)
    {
        if (is_null($ranks)) {
            throw new \InvalidArgumentException('non-nullable ranks cannot be null');
        }
        $this->container['ranks'] = $ranks;

        return $this;
    }

    /**
     * Gets include_in_rankings
     *
     * @return bool
     */
    public function getIncludeInRankings()
    {
        return $this->container['include_in_rankings'];
    }

    /**
     * Sets include_in_rankings
     *
     * @param bool $include_in_rankings Whether the user is included in rankings.
     *
     * @return self
     */
    public function setIncludeInRankings($include_in_rankings)
    {
        if (is_null($include_in_rankings)) {
            throw new \InvalidArgumentException('non-nullable include_in_rankings cannot be null');
        }
        $this->container['include_in_rankings'] = $include_in_rankings;

        return $this;
    }

    /**
     * Gets distance_system
     *
     * @return string
     */
    public function getDistanceSystem()
    {
        return $this->container['distance_system'];
    }

    /**
     * Sets distance_system
     *
     * @param string $distance_system The system used for measuring distance (miles or kilometers).
     *
     * @return self
     */
    public function setDistanceSystem($distance_system)
    {
        if (is_null($distance_system)) {
            throw new \InvalidArgumentException('non-nullable distance_system cannot be null');
        }
        $allowedValues = $this->getDistanceSystemAllowableValues();
        if (!in_array($distance_system, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'distance_system', must be one of '%s'",
                    $distance_system,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['distance_system'] = $distance_system;

        return $this;
    }

    /**
     * Gets last_pulse
     *
     * @return \WhatPulse\Model\UserResourceLastPulse
     */
    public function getLastPulse()
    {
        return $this->container['last_pulse'];
    }

    /**
     * Sets last_pulse
     *
     * @param \WhatPulse\Model\UserResourceLastPulse $last_pulse last_pulse
     *
     * @return self
     */
    public function setLastPulse($last_pulse)
    {
        if (is_null($last_pulse)) {
            throw new \InvalidArgumentException('non-nullable last_pulse cannot be null');
        }
        $this->container['last_pulse'] = $last_pulse;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


